{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python expression Annotation Documentation Project aim Annotate the sentences provided on the annotation website using Python expressions. Getting started This doc provides the documentation for the Python expression annotation, and contains help informations you may find useful. Tutorial Tutorial Utility informations Utility functions - functions you may use to write the Python programs Data structure - data structure of the image with methods that may be used Preloaded variables - some variables already provided Attention Please opt for shorter code when possible, since it usually aligns better with the language of the sentence. Attention If there is any sentence you think you cannot annotate with the provided functions, please do NOT add extra-functions, but reach out to us via the contact information below and/or leave a comment in the annotation tool. Attention If there are problematic cases (ex. you think that an annotation is correct but it cannot pass all the validation cases), please click on \"Skip\", write your comment along with your code, submit it and continue to the next case. You may also notify us (email below). Contacts If you have any questions, please contact annotation.faq@gmail.com .","title":"Home"},{"location":"#welcome-to-python-expression-annotation-documentation","text":"","title":"Welcome to Python expression Annotation Documentation"},{"location":"#project-aim","text":"Annotate the sentences provided on the annotation website using Python expressions.","title":"Project aim"},{"location":"#getting-started","text":"This doc provides the documentation for the Python expression annotation, and contains help informations you may find useful.","title":"Getting started"},{"location":"#tutorial","text":"Tutorial","title":"Tutorial"},{"location":"#utility-informations","text":"Utility functions - functions you may use to write the Python programs Data structure - data structure of the image with methods that may be used Preloaded variables - some variables already provided Attention Please opt for shorter code when possible, since it usually aligns better with the language of the sentence. Attention If there is any sentence you think you cannot annotate with the provided functions, please do NOT add extra-functions, but reach out to us via the contact information below and/or leave a comment in the annotation tool. Attention If there are problematic cases (ex. you think that an annotation is correct but it cannot pass all the validation cases), please click on \"Skip\", write your comment along with your code, submit it and continue to the next case. You may also notify us (email below).","title":"Utility informations"},{"location":"#contacts","text":"If you have any questions, please contact annotation.faq@gmail.com .","title":"Contacts"},{"location":"data-structure/","text":"Data structure class structured_rep. Item ( dic ) Represents the basic building blocks of the structured representations - objects that have shape, color and spatial location, each belongs to a certain 'box'. Attributes box \u2014 Return the box to which the item belongs to. class structured_rep. Box ( items_as_dicts ) Represents the 'box' in the image. Methods all_items_in_box ( ) \u2014 Returns the items in the box. is_tower ( ) \u2014 Check whether the items form towers of blocks (and not a regular image with objects of various shapes). method is_tower ( ) Check whether the items form towers of blocks (and not a regular image with objects of various shapes). method all_items_in_box ( ) Returns the items in the box.","title":"Data-structures"},{"location":"data-structure/#data-structure","text":"class structured_rep. Item ( dic ) Represents the basic building blocks of the structured representations - objects that have shape, color and spatial location, each belongs to a certain 'box'. Attributes box \u2014 Return the box to which the item belongs to. class structured_rep. Box ( items_as_dicts ) Represents the 'box' in the image. Methods all_items_in_box ( ) \u2014 Returns the items in the box. is_tower ( ) \u2014 Check whether the items form towers of blocks (and not a regular image with objects of various shapes). method is_tower ( ) Check whether the items form towers of blocks (and not a regular image with objects of various shapes). method all_items_in_box ( ) Returns the items in the box.","title":"Data structure"},{"location":"tutorial/","text":"Tutorial The tutorial shows have an example of annotation, and where to find the tools you need. Below the tutorial, there are several additional examples . Please check the examples after the tutorial. 1.1: Log in Please log in using your credentials. If you do not have the credentials, please reach out to annotation.faq@gmail.com . Allow a few seconds for page redirection. 1.2: Mode selection Are you: testing the tool / doing an interview ? Select the test mode. working as usual ? Select the corresponding task(s) (Only choose the ones attributed after discussion to avoid unecessary work). The page after mode selection looks like this: Goal of task Instructions : Please look at the sentence in the box below describing the image, and write a correct Python expression for this sentence. In case of doubt, please: first refer to the Tutorial or the Documentation , if you have additional questions, post it on the Annotation QA Discord , or contact annotation.faq@gmail.com . How to understand this task? There are 3 elements in this box: a sentence an image, divided into 3 boxes a Boolean This sentence states: \"There are 2 blue squares\". For the image above , we effectively observe 2 blue squares (1 in the box in the middle, and 1 in the right box). Thus, the sentence is true for the image above. For the image below, the sentence is false. What we need to do, is to translate the sentence into a Python expression, that can evaluate whether the sentence is true or false for a given image. Below is an example. 1.3: Write the code We will write the Python expression, using the functions provided. You can also use the data structures with corresponding methods, and variables provided. Attention Please ONLY use the provided functions and methods. If you think one annotation cannot be done with them, or if there is an issue, please click on \"Skip this example\", and leave your comment in the pop-up box. You can also note the Image ID(s), and reach out to annotation.faq@gmail.com . Attention Different expressions can be valid and correct for one sentence. Please opt for SHORTER CODE when possible, since it usually aligns better with the language of the sentence. What to do For the example above, we want to check if there are 2 blue squares in the image. One way we can think of it ( and it is not the only one ) is to check all the items in the image, and filter over them by checking if they are blue AND a square. Now, let's implement it. We can see that on the page Variables that there is a variable called all_items . On the page Utility functions , section Filters , there is a function filter_obj that we can use. The filtering conditions apply to the color and to the shape of the item. We can find the function is_blue in the section Color , and is_square in the section Shape . We can now write the filtering part, using a lambda function: filter_obj(all_items, lambda x: is_blue(x) and is_square(x)) Finally, we want to check the existence of 2 items satisfying the conditions. In the section General , we can find a function count that we may use. So, our final expression can be like: count(filter_obj(all_items, lambda x: is_blue(x) and is_square(x))) == 2 Note This is just a solution, not the solution! Syntax checking During the writing time, you can click on Check syntax to verify if the syntax of your expression is valid. If it is, the Output panel will just show the Running time. Otherwise, it will display an error message. Validation When you finished your Python expression, please click on the button Validate to validate your result on the visible image, and a few hidden cases. You should expect your expression to pass all the cases: ...Otherwise, please review your code with the help of the details given in the output, and modify your code so that it passes all the test cases. If you think that there is a bug or any other issue (with the data, or else), please click on Skip this example and leave your comment. You can also note the Image ID(s), and reach out to annotation.faq@gmail.com . Types of cases There can be 2 types of case in this task. Tower , in which the 3 boxes only contain squares in a column (there can be no square, 1 square, 2 squares, etc.) The tower case only contain 1 shape and 1 size. General , in which you may find items in different shapes and sizes, and the objects can be anywhere in a box. What to avoid Sometimes you might be able to pass all the cases using a wrong expression, however it does not correspond to the sentence. These issues can be more or less visible (some may be due to reasoning), please verify your expression as much as possible, so that it correctly expresses the sentence. 1.4: Submission Before submitting At the bottom of the page, you can find 2 sections: Confidence score : Please assign a confidence score to the code you wrote. To which extent this code is faithfully \"translating\" the sentence in a clear and simple way? For instance, if you are not confident about the reasoning, you may want to choose a lower score for this case. Comment : If you have any comment or thought about this case, please leave your comment in the text box \"Comment\". After filling out these sections, you can Submit . (You cannot if all the cases have not been validated previously!) 1.5 (If applicable): Skip an example If you think the annotation cannot be done with the provided materials (functions, data structures, variables), or if there is an issue about the case you are working on, please: click on Skip this example , leave your comment: specifically, why you want to skip this case? What issue did you encounter? You can also note the Image ID and reach out to annotation.faq@gmail.com . 2. A tour of available functions/methods/variables Link to the videos 3. Example for each category of function/method/variable We provide some examples for each category of function/method/variable. General: exist: Ex 1-6 unique: Ex 5 count: Ex 1-4, 6 Color: Ex 3 Shape: Ex 3 Size: Ex 3 Relative location in the box: Ex 5-6 Touching the box: Ex 3 Filters: Ex 1-2 Comparison functions: Relation functions: Ex 5 Logical operators: Ex 5 Other functions (set-related): Ex 4 4. Examples Below are a few examples of annotation with (just) some possible answer. Ex 1 Sentence : There is 1 box with 2 items Python expression : exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)) Ex 2 Sentence : There is 1 box with 5 yellow items Python expression : exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 5)) This expression is also valid (but slightly longer): count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 5)) == 1 Ex 3 Sentence : There is a small black triangle touching the wall. Python expression : exist(filter_obj(all_items, lambda x: AND(AND(AND(is_small(x), is_black(x)), is_triangle(x)), is_touching_wall(x)))) Ex 4 Sentence : There is a box with all 3 different colors and only 1 blue item. Python expression : exist(filter_obj(all_boxes, lambda x: AND(AND(AND(Any(x.all_items_in_box(), is_black), Any(x.all_items_in_box(), is_blue)), Any(x.all_items_in_box(), is_yellow)), count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1))) Ex 5 Sentence : The first two blocks from the base of a tower are black. Python expression : exist(filter_obj(all_items, lambda x: AND(is_black(x), is_bottom(x)) and AND(exist(get_above(x)), is_black(unique(get_above(x)))))) Ex 6 Sentence : There is a yellow block as the top of a tower with exactly three blocks. Python expression : exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_top(x)), x.box.is_tower()), count(x.box.all_items_in_box()) == 3)))","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"The tutorial shows have an example of annotation, and where to find the tools you need. Below the tutorial, there are several additional examples . Please check the examples after the tutorial.","title":"Tutorial"},{"location":"tutorial/#11-log-in","text":"Please log in using your credentials. If you do not have the credentials, please reach out to annotation.faq@gmail.com . Allow a few seconds for page redirection.","title":"1.1: Log in"},{"location":"tutorial/#12-mode-selection","text":"Are you: testing the tool / doing an interview ? Select the test mode. working as usual ? Select the corresponding task(s) (Only choose the ones attributed after discussion to avoid unecessary work). The page after mode selection looks like this:","title":"1.2: Mode selection"},{"location":"tutorial/#goal-of-task","text":"Instructions : Please look at the sentence in the box below describing the image, and write a correct Python expression for this sentence. In case of doubt, please: first refer to the Tutorial or the Documentation , if you have additional questions, post it on the Annotation QA Discord , or contact annotation.faq@gmail.com . How to understand this task? There are 3 elements in this box: a sentence an image, divided into 3 boxes a Boolean This sentence states: \"There are 2 blue squares\". For the image above , we effectively observe 2 blue squares (1 in the box in the middle, and 1 in the right box). Thus, the sentence is true for the image above. For the image below, the sentence is false. What we need to do, is to translate the sentence into a Python expression, that can evaluate whether the sentence is true or false for a given image. Below is an example.","title":"Goal of task"},{"location":"tutorial/#13-write-the-code","text":"We will write the Python expression, using the functions provided. You can also use the data structures with corresponding methods, and variables provided. Attention Please ONLY use the provided functions and methods. If you think one annotation cannot be done with them, or if there is an issue, please click on \"Skip this example\", and leave your comment in the pop-up box. You can also note the Image ID(s), and reach out to annotation.faq@gmail.com . Attention Different expressions can be valid and correct for one sentence. Please opt for SHORTER CODE when possible, since it usually aligns better with the language of the sentence.","title":"1.3: Write the code"},{"location":"tutorial/#what-to-do","text":"For the example above, we want to check if there are 2 blue squares in the image. One way we can think of it ( and it is not the only one ) is to check all the items in the image, and filter over them by checking if they are blue AND a square. Now, let's implement it. We can see that on the page Variables that there is a variable called all_items . On the page Utility functions , section Filters , there is a function filter_obj that we can use. The filtering conditions apply to the color and to the shape of the item. We can find the function is_blue in the section Color , and is_square in the section Shape . We can now write the filtering part, using a lambda function: filter_obj(all_items, lambda x: is_blue(x) and is_square(x)) Finally, we want to check the existence of 2 items satisfying the conditions. In the section General , we can find a function count that we may use. So, our final expression can be like: count(filter_obj(all_items, lambda x: is_blue(x) and is_square(x))) == 2 Note This is just a solution, not the solution!","title":"What to do"},{"location":"tutorial/#syntax-checking","text":"During the writing time, you can click on Check syntax to verify if the syntax of your expression is valid. If it is, the Output panel will just show the Running time. Otherwise, it will display an error message.","title":"Syntax checking"},{"location":"tutorial/#validation","text":"When you finished your Python expression, please click on the button Validate to validate your result on the visible image, and a few hidden cases. You should expect your expression to pass all the cases: ...Otherwise, please review your code with the help of the details given in the output, and modify your code so that it passes all the test cases. If you think that there is a bug or any other issue (with the data, or else), please click on Skip this example and leave your comment. You can also note the Image ID(s), and reach out to annotation.faq@gmail.com .","title":"Validation"},{"location":"tutorial/#types-of-cases","text":"There can be 2 types of case in this task. Tower , in which the 3 boxes only contain squares in a column (there can be no square, 1 square, 2 squares, etc.) The tower case only contain 1 shape and 1 size. General , in which you may find items in different shapes and sizes, and the objects can be anywhere in a box.","title":"Types of cases"},{"location":"tutorial/#what-to-avoid","text":"Sometimes you might be able to pass all the cases using a wrong expression, however it does not correspond to the sentence. These issues can be more or less visible (some may be due to reasoning), please verify your expression as much as possible, so that it correctly expresses the sentence.","title":"What to avoid"},{"location":"tutorial/#14-submission","text":"","title":"1.4: Submission"},{"location":"tutorial/#before-submitting","text":"At the bottom of the page, you can find 2 sections: Confidence score : Please assign a confidence score to the code you wrote. To which extent this code is faithfully \"translating\" the sentence in a clear and simple way? For instance, if you are not confident about the reasoning, you may want to choose a lower score for this case. Comment : If you have any comment or thought about this case, please leave your comment in the text box \"Comment\". After filling out these sections, you can Submit . (You cannot if all the cases have not been validated previously!)","title":"Before submitting"},{"location":"tutorial/#15-if-applicable-skip-an-example","text":"If you think the annotation cannot be done with the provided materials (functions, data structures, variables), or if there is an issue about the case you are working on, please: click on Skip this example , leave your comment: specifically, why you want to skip this case? What issue did you encounter? You can also note the Image ID and reach out to annotation.faq@gmail.com .","title":"1.5 (If applicable): Skip an example"},{"location":"tutorial/#2-a-tour-of-available-functionsmethodsvariables","text":"Link to the videos","title":"2. A tour of available functions/methods/variables"},{"location":"tutorial/#3-example-for-each-category-of-functionmethodvariable","text":"We provide some examples for each category of function/method/variable. General: exist: Ex 1-6 unique: Ex 5 count: Ex 1-4, 6 Color: Ex 3 Shape: Ex 3 Size: Ex 3 Relative location in the box: Ex 5-6 Touching the box: Ex 3 Filters: Ex 1-2 Comparison functions: Relation functions: Ex 5 Logical operators: Ex 5 Other functions (set-related): Ex 4","title":"3. Example for each category of function/method/variable"},{"location":"tutorial/#4-examples","text":"Below are a few examples of annotation with (just) some possible answer.","title":"4. Examples"},{"location":"tutorial/#ex-1","text":"Sentence : There is 1 box with 2 items Python expression : exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))","title":"Ex 1"},{"location":"tutorial/#ex-2","text":"Sentence : There is 1 box with 5 yellow items Python expression : exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 5)) This expression is also valid (but slightly longer): count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 5)) == 1","title":"Ex 2"},{"location":"tutorial/#ex-3","text":"Sentence : There is a small black triangle touching the wall. Python expression : exist(filter_obj(all_items, lambda x: AND(AND(AND(is_small(x), is_black(x)), is_triangle(x)), is_touching_wall(x))))","title":"Ex 3"},{"location":"tutorial/#ex-4","text":"Sentence : There is a box with all 3 different colors and only 1 blue item. Python expression : exist(filter_obj(all_boxes, lambda x: AND(AND(AND(Any(x.all_items_in_box(), is_black), Any(x.all_items_in_box(), is_blue)), Any(x.all_items_in_box(), is_yellow)), count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1)))","title":"Ex 4"},{"location":"tutorial/#ex-5","text":"Sentence : The first two blocks from the base of a tower are black. Python expression : exist(filter_obj(all_items, lambda x: AND(is_black(x), is_bottom(x)) and AND(exist(get_above(x)), is_black(unique(get_above(x))))))","title":"Ex 5"},{"location":"tutorial/#ex-6","text":"Sentence : There is a yellow block as the top of a tower with exactly three blocks. Python expression : exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_top(x)), x.box.is_tower()), count(x.box.all_items_in_box()) == 3)))","title":"Ex 6"},{"location":"utility-functions/","text":"Utility functions Note Please opt for shorter code when possible, since it usually aligns better with the language of the sentence. General function logical_forms. exist ( _set ) Check if a set is empty or not. Parameters _set (set) \u2014 a set of objects Returns A boolean (True if it is not empty). function logical_forms. unique ( _set ) Check if there is only one element in the set and return this element if it's the case. Otherwise, it will raise an error. Parameters _set (set) \u2014 a set of objects Returns The first element of the set. function logical_forms. count ( _set ) Count the number of elements in a set. Parameters _set (set) \u2014 a set of objects Returns (int) The number of elements in a set. Color function logical_forms. is_yellow ( x ) Check if the color of the item is yellow. Parameters x \u2014 Item Returns (bool) A boolean indicating if the color is yellow. function logical_forms. is_blue ( x ) Check if the color of the item is blue. Parameters x \u2014 Item Returns (bool) A boolean indicating if the color is blue. function logical_forms. is_black ( x ) Check if the color of the item is black. Parameters x \u2014 Item Returns A boolean indicating if the color is black. Shape function logical_forms. is_circle ( x ) Check if the shape of the item is a circle. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_square ( x ) Check if the shape of the item is a square. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_triangle ( x ) Check if the shape of the item is a triangle. Parameters x \u2014 Item Returns A boolean. Size function logical_forms. is_big ( x ) Check if the size of the item is big. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_medium ( x ) Check if the size of the item is medium. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_small ( x ) Check if the size of the item is small Parameters x \u2014 Item Returns A boolean. Relative location in the box function logical_forms. is_top ( x ) Check if the item is the closest to the top of the box. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_bottom ( x ) Check if the item is the closest to the bottom of the box. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_second ( x ) Check if the item is the second (from the bottom) in a tower. Parameters x \u2014 Item (in a tower) Returns A boolean. function logical_forms. is_third ( x ) Check if the item is the third (from the bottom) in a tower. Parameters x \u2014 Item (in a tower) Returns A boolean. Touching the box function logical_forms. is_touching_wall ( x , side=None ) Check if the item is touching a wall Parameters x \u2014 Item side (optional) \u2014 Optional, can be Side.ANY, Side.LEFT, Side.RIGHT, Side.TOP, Side.BOTTOM Returns A boolean function logical_forms. is_closely_touching_wall ( x , side=None ) Check if the item is closely touching a wall Parameters x \u2014 Item side (optional) \u2014 Optional, can be Side.ANY, Side.LEFT, Side.RIGHT, Side.TOP, Side.BOTTOM Returns A boolean function logical_forms. is_touching_corner ( x , side=None ) Check if the item is touching a corner Parameters x \u2014 Item side (optional) \u2014 Optional, can be Side.ANY, Side.LEFT, Side.RIGHT, Side.TOP, Side.BOTTOM Returns A boolean function logical_forms. is_closely_touching_corner ( x , side=None ) Check if the item is closely touching a corner Parameters x \u2014 Item side (optional) \u2014 Optional, can be Side.ANY, Side.LEFT, Side.RIGHT, Side.TOP, Side.BOTTOM Returns A boolean Query functions These functions return item properties. function logical_forms. query_color ( x ) Check the color properties of the item Parameters x \u2014 Item Returns The color properties function logical_forms. query_size ( x ) Check the size properties of the item Parameters x \u2014 Item Returns The size properties function logical_forms. query_shape ( x ) Check the shape properties of the item Parameters x \u2014 Item Returns The shape properties function logical_forms. get_set_colors ( l ) Get the set of colors of the items of a list Parameters l \u2014 a list of Item(s) Returns A set containing the unique colors of the items of a list function logical_forms. get_set_sizes ( l ) Get the set of sizes of the items of a list Parameters l \u2014 a list of Item(s) Returns A set containing the unique sizes of the items of a list function logical_forms. get_set_shapes ( l ) Get the set of shapes of the items of a list Parameters l \u2014 a list of Item(s) Returns A set containing the unique shapes of the items of a list Filters function logical_forms. filter_obj ( _set , func ) Filter a set according to a function. Parameters _set \u2014 a set of items func \u2014 filter function Returns A list of filtered items function logical_forms. filter_color ( _set , color ) Filter a set according to a color. Parameters _set \u2014 a set of items color (Color) \u2014 can be: Color.YELLOW, Color.BLACK, Color.BLUE Returns A list of filtered items function logical_forms. filter_size ( _set , size ) Filter a set according to a size. Parameters _set \u2014 a set of items size (Size) \u2014 can be Size.SMALL, Size.MEDIUM, Size.BIG Returns A list of filtered items function logical_forms. filter_shape ( _set , shape ) Filter a set according to a shape. Parameters _set \u2014 a set of items shape (Shape) \u2014 can be Shape.CIRCLE, Shape.SQUARE, Shape.TRIANGLE Returns A list of filtered items Comparison functions Integer comparison function logical_forms. le ( a , b ) Compare if element a is less than or equal to element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. ge ( a , b ) Compare if element a is greater than or equal to element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. lt ( a , b ) Compare if element a is strictly less than element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. gt ( a , b ) Compare if element a is strictly greater than element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. equal_int ( a , b ) Compare if element a is equal to element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean Generic equality check (This check is not limited to Integer type.) function logical_forms. equal ( a , b ) Compare if element a is equal to element b. Parameters a \u2014 first element b \u2014 second element Returns A boolean Type-specific equality functions function logical_forms. equal_color ( a , b ) Check if the colors of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean function logical_forms. equal_size ( a , b ) Check if the sizes of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean function logical_forms. equal_shape ( a , b ) Check if the shape of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean Relation functions Given an Item or a set of items, return a set of items in a specific relation with it/them. function logical_forms. get_above ( s ) Given an item or a set of items, return a set of items (strictly) above it/them in the same box. For towers, the function return a set containing the block above it. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_below ( s ) Given an item or a set of items, return a set of items (strictly) below it/them in the same box. For towers, the function return a set containing the block below it. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_touching ( s ) Given an item or a set of items, return a set of items touching it/them. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_closely_touching ( s ) Given an item or a set of items, return a set of items closely touching it/them. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_box_all_above ( s ) Given an item or a set of items, return a set of all the items above it/them in the same box. For towers, the function return a set containing all the blocks above it, in the same box. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_box_all_below ( s ) Given an item or a set of items, return a set of all the items below it/them in the same box. For towers, the function return a set containing all the blocks below it, in the same box. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_img_all_above ( s ) Given an item or a set of items, return a set of all the items above it/them in the whole image. For towers, the function return a set containing all the blocks above it, in all the image. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_img_all_below ( s ) Given an item or a set of items, return a set of all the items below it/them in the whole image. For towers, the function return a set containing all the blocks below it, in all the image. Parameters s \u2014 an item or a set of items Returns a set of items Logical operators function logical_forms. AND ( a , b ) Check the logical relation AND between a and b. Returns A boolean function logical_forms. OR ( a , b ) Check the logical relation OR between a and b. Returns A boolean function logical_forms. NOT ( a ) Check the logical relation NOT between a and b. Returns A boolean Other functions (set-related) function logical_forms. All ( _set , func ) Check if a function is True for all items of a set Parameters _set \u2014 a set of items func \u2014 a function Returns A boolean function logical_forms. Any ( _set , func ) Check if a function is True for at least one item of a set Parameters _set \u2014 a set of items func \u2014 a function Returns A boolean function logical_forms. member_of ( item , _set ) Check if an item is a member of a set. Parameters _set \u2014 a set of items Returns A boolean function logical_forms. contained ( set1 , set2 ) Check if set1 is contained by set2. Returns A boolean function logical_forms. equal_set ( set1 , set2 ) Check if set1 and set2 are equal. Returns A boolean function logical_forms. all_same ( _set ) Check if all the items within a set are identical. Returns A boolean function logical_forms. all_same_attribute ( _set , func ) Check if all the items within a set are identical. Parameters func \u2014 a function that verifies a certain property of a given object in the set Returns A boolean function logical_forms. all_same_shape ( _set ) Check if all the items within a set have an identical shape. Returns A boolean function logical_forms. all_same_color ( _set ) Check if all the items within a set have an identical color. Returns A boolean function logical_forms. all_same_size ( _set ) Check if all the items within a set have an identical size. Returns A boolean function logical_forms. union ( set1 , set2 ) Gives the union of 2 sets. Returns The union of set1 and set2 function logical_forms. union_all ( sets ) Gives a set which is the union of all the items within an ensemble (ex. a list) of sets. Returns The set which is the union of all the items within an ensemble (ex. a list) of sets function logical_forms. intersect ( set1 , set2 ) Gives the intersection of 2 sets. Returns The intersection of set1 and set2 function logical_forms. intersect_all ( sets ) Gives the intersection of an ensemble of sets. Returns The intersection of an ensemble of sets function logical_forms. combinations ( s , r ) Gives Parameters s \u2014 a set of items r \u2014 int Returns (A list of r-length subsequences from the input s. (Ex) combinations(s, 2) returns the list of all combinations of items in s of length 2)","title":"Utility-functions"},{"location":"utility-functions/#utility-functions","text":"Note Please opt for shorter code when possible, since it usually aligns better with the language of the sentence.","title":"Utility functions"},{"location":"utility-functions/#general","text":"function logical_forms. exist ( _set ) Check if a set is empty or not. Parameters _set (set) \u2014 a set of objects Returns A boolean (True if it is not empty). function logical_forms. unique ( _set ) Check if there is only one element in the set and return this element if it's the case. Otherwise, it will raise an error. Parameters _set (set) \u2014 a set of objects Returns The first element of the set. function logical_forms. count ( _set ) Count the number of elements in a set. Parameters _set (set) \u2014 a set of objects Returns (int) The number of elements in a set.","title":"General"},{"location":"utility-functions/#color","text":"function logical_forms. is_yellow ( x ) Check if the color of the item is yellow. Parameters x \u2014 Item Returns (bool) A boolean indicating if the color is yellow. function logical_forms. is_blue ( x ) Check if the color of the item is blue. Parameters x \u2014 Item Returns (bool) A boolean indicating if the color is blue. function logical_forms. is_black ( x ) Check if the color of the item is black. Parameters x \u2014 Item Returns A boolean indicating if the color is black.","title":"Color"},{"location":"utility-functions/#shape","text":"function logical_forms. is_circle ( x ) Check if the shape of the item is a circle. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_square ( x ) Check if the shape of the item is a square. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_triangle ( x ) Check if the shape of the item is a triangle. Parameters x \u2014 Item Returns A boolean.","title":"Shape"},{"location":"utility-functions/#size","text":"function logical_forms. is_big ( x ) Check if the size of the item is big. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_medium ( x ) Check if the size of the item is medium. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_small ( x ) Check if the size of the item is small Parameters x \u2014 Item Returns A boolean.","title":"Size"},{"location":"utility-functions/#relative-location-in-the-box","text":"function logical_forms. is_top ( x ) Check if the item is the closest to the top of the box. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_bottom ( x ) Check if the item is the closest to the bottom of the box. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_second ( x ) Check if the item is the second (from the bottom) in a tower. Parameters x \u2014 Item (in a tower) Returns A boolean. function logical_forms. is_third ( x ) Check if the item is the third (from the bottom) in a tower. Parameters x \u2014 Item (in a tower) Returns A boolean.","title":"Relative location in the box"},{"location":"utility-functions/#touching-the-box","text":"function logical_forms. is_touching_wall ( x , side=None ) Check if the item is touching a wall Parameters x \u2014 Item side (optional) \u2014 Optional, can be Side.ANY, Side.LEFT, Side.RIGHT, Side.TOP, Side.BOTTOM Returns A boolean function logical_forms. is_closely_touching_wall ( x , side=None ) Check if the item is closely touching a wall Parameters x \u2014 Item side (optional) \u2014 Optional, can be Side.ANY, Side.LEFT, Side.RIGHT, Side.TOP, Side.BOTTOM Returns A boolean function logical_forms. is_touching_corner ( x , side=None ) Check if the item is touching a corner Parameters x \u2014 Item side (optional) \u2014 Optional, can be Side.ANY, Side.LEFT, Side.RIGHT, Side.TOP, Side.BOTTOM Returns A boolean function logical_forms. is_closely_touching_corner ( x , side=None ) Check if the item is closely touching a corner Parameters x \u2014 Item side (optional) \u2014 Optional, can be Side.ANY, Side.LEFT, Side.RIGHT, Side.TOP, Side.BOTTOM Returns A boolean","title":"Touching the box"},{"location":"utility-functions/#query-functions","text":"These functions return item properties. function logical_forms. query_color ( x ) Check the color properties of the item Parameters x \u2014 Item Returns The color properties function logical_forms. query_size ( x ) Check the size properties of the item Parameters x \u2014 Item Returns The size properties function logical_forms. query_shape ( x ) Check the shape properties of the item Parameters x \u2014 Item Returns The shape properties function logical_forms. get_set_colors ( l ) Get the set of colors of the items of a list Parameters l \u2014 a list of Item(s) Returns A set containing the unique colors of the items of a list function logical_forms. get_set_sizes ( l ) Get the set of sizes of the items of a list Parameters l \u2014 a list of Item(s) Returns A set containing the unique sizes of the items of a list function logical_forms. get_set_shapes ( l ) Get the set of shapes of the items of a list Parameters l \u2014 a list of Item(s) Returns A set containing the unique shapes of the items of a list","title":"Query functions"},{"location":"utility-functions/#filters","text":"function logical_forms. filter_obj ( _set , func ) Filter a set according to a function. Parameters _set \u2014 a set of items func \u2014 filter function Returns A list of filtered items function logical_forms. filter_color ( _set , color ) Filter a set according to a color. Parameters _set \u2014 a set of items color (Color) \u2014 can be: Color.YELLOW, Color.BLACK, Color.BLUE Returns A list of filtered items function logical_forms. filter_size ( _set , size ) Filter a set according to a size. Parameters _set \u2014 a set of items size (Size) \u2014 can be Size.SMALL, Size.MEDIUM, Size.BIG Returns A list of filtered items function logical_forms. filter_shape ( _set , shape ) Filter a set according to a shape. Parameters _set \u2014 a set of items shape (Shape) \u2014 can be Shape.CIRCLE, Shape.SQUARE, Shape.TRIANGLE Returns A list of filtered items","title":"Filters"},{"location":"utility-functions/#comparison-functions","text":"","title":"Comparison functions"},{"location":"utility-functions/#integer-comparison","text":"function logical_forms. le ( a , b ) Compare if element a is less than or equal to element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. ge ( a , b ) Compare if element a is greater than or equal to element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. lt ( a , b ) Compare if element a is strictly less than element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. gt ( a , b ) Compare if element a is strictly greater than element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. equal_int ( a , b ) Compare if element a is equal to element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean","title":"Integer comparison"},{"location":"utility-functions/#generic-equality-check","text":"(This check is not limited to Integer type.) function logical_forms. equal ( a , b ) Compare if element a is equal to element b. Parameters a \u2014 first element b \u2014 second element Returns A boolean","title":"Generic equality check"},{"location":"utility-functions/#type-specific-equality-functions","text":"function logical_forms. equal_color ( a , b ) Check if the colors of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean function logical_forms. equal_size ( a , b ) Check if the sizes of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean function logical_forms. equal_shape ( a , b ) Check if the shape of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean","title":"Type-specific equality functions"},{"location":"utility-functions/#relation-functions","text":"Given an Item or a set of items, return a set of items in a specific relation with it/them. function logical_forms. get_above ( s ) Given an item or a set of items, return a set of items (strictly) above it/them in the same box. For towers, the function return a set containing the block above it. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_below ( s ) Given an item or a set of items, return a set of items (strictly) below it/them in the same box. For towers, the function return a set containing the block below it. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_touching ( s ) Given an item or a set of items, return a set of items touching it/them. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_closely_touching ( s ) Given an item or a set of items, return a set of items closely touching it/them. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_box_all_above ( s ) Given an item or a set of items, return a set of all the items above it/them in the same box. For towers, the function return a set containing all the blocks above it, in the same box. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_box_all_below ( s ) Given an item or a set of items, return a set of all the items below it/them in the same box. For towers, the function return a set containing all the blocks below it, in the same box. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_img_all_above ( s ) Given an item or a set of items, return a set of all the items above it/them in the whole image. For towers, the function return a set containing all the blocks above it, in all the image. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_img_all_below ( s ) Given an item or a set of items, return a set of all the items below it/them in the whole image. For towers, the function return a set containing all the blocks below it, in all the image. Parameters s \u2014 an item or a set of items Returns a set of items","title":"Relation functions"},{"location":"utility-functions/#logical-operators","text":"function logical_forms. AND ( a , b ) Check the logical relation AND between a and b. Returns A boolean function logical_forms. OR ( a , b ) Check the logical relation OR between a and b. Returns A boolean function logical_forms. NOT ( a ) Check the logical relation NOT between a and b. Returns A boolean","title":"Logical operators"},{"location":"utility-functions/#other-functions-set-related","text":"function logical_forms. All ( _set , func ) Check if a function is True for all items of a set Parameters _set \u2014 a set of items func \u2014 a function Returns A boolean function logical_forms. Any ( _set , func ) Check if a function is True for at least one item of a set Parameters _set \u2014 a set of items func \u2014 a function Returns A boolean function logical_forms. member_of ( item , _set ) Check if an item is a member of a set. Parameters _set \u2014 a set of items Returns A boolean function logical_forms. contained ( set1 , set2 ) Check if set1 is contained by set2. Returns A boolean function logical_forms. equal_set ( set1 , set2 ) Check if set1 and set2 are equal. Returns A boolean function logical_forms. all_same ( _set ) Check if all the items within a set are identical. Returns A boolean function logical_forms. all_same_attribute ( _set , func ) Check if all the items within a set are identical. Parameters func \u2014 a function that verifies a certain property of a given object in the set Returns A boolean function logical_forms. all_same_shape ( _set ) Check if all the items within a set have an identical shape. Returns A boolean function logical_forms. all_same_color ( _set ) Check if all the items within a set have an identical color. Returns A boolean function logical_forms. all_same_size ( _set ) Check if all the items within a set have an identical size. Returns A boolean function logical_forms. union ( set1 , set2 ) Gives the union of 2 sets. Returns The union of set1 and set2 function logical_forms. union_all ( sets ) Gives a set which is the union of all the items within an ensemble (ex. a list) of sets. Returns The set which is the union of all the items within an ensemble (ex. a list) of sets function logical_forms. intersect ( set1 , set2 ) Gives the intersection of 2 sets. Returns The intersection of set1 and set2 function logical_forms. intersect_all ( sets ) Gives the intersection of an ensemble of sets. Returns The intersection of an ensemble of sets function logical_forms. combinations ( s , r ) Gives Parameters s \u2014 a set of items r \u2014 int Returns (A list of r-length subsequences from the input s. (Ex) combinations(s, 2) returns the list of all combinations of items in s of length 2)","title":"Other functions (set-related)"},{"location":"variables/","text":"Variables Provided variables There are some variables that are already provided: all_items This variable contains all the objects that have a shape, a color and a spatial location in the image. all_boxes This variable contains all the boxes in the image (with a number of 3 per image).","title":"Variables"},{"location":"variables/#variables","text":"","title":"Variables"},{"location":"variables/#provided-variables","text":"There are some variables that are already provided: all_items This variable contains all the objects that have a shape, a color and a spatial location in the image. all_boxes This variable contains all the boxes in the image (with a number of 3 per image).","title":"Provided variables"}]}