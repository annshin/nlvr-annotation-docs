{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python program Annotation Documentation Project aim Annotating the sentences provided in the annotation website with Python programs. Getting started This doc provides the documentation for the NLVR Python program annotation, and contains help informations you may find useful. Tutorial Tutorial Utility informations Utility functions - functions you may use to write the Python programs Data structure - data structure of the image with methods that may be used Preloaded variables - some variables already provided Note Please opt for shorter code when possible, since it usually aligns better with the language of the sentence. Note If there is any sentence you think you cannot annotate with the provided functions, please do NOT add extra-functions, but reach out to us via the contact information below and/or leave a comment in the annotation tool. Contacts If you have any questions, please contact Anne Wu at aw588@cornell.edu.","title":"Home"},{"location":"#welcome-to-python-program-annotation-documentation","text":"","title":"Welcome to Python program Annotation Documentation"},{"location":"#project-aim","text":"Annotating the sentences provided in the annotation website with Python programs.","title":"Project aim"},{"location":"#getting-started","text":"This doc provides the documentation for the NLVR Python program annotation, and contains help informations you may find useful.","title":"Getting started"},{"location":"#tutorial","text":"Tutorial","title":"Tutorial"},{"location":"#utility-informations","text":"Utility functions - functions you may use to write the Python programs Data structure - data structure of the image with methods that may be used Preloaded variables - some variables already provided Note Please opt for shorter code when possible, since it usually aligns better with the language of the sentence. Note If there is any sentence you think you cannot annotate with the provided functions, please do NOT add extra-functions, but reach out to us via the contact information below and/or leave a comment in the annotation tool.","title":"Utility informations"},{"location":"#contacts","text":"If you have any questions, please contact Anne Wu at aw588@cornell.edu.","title":"Contacts"},{"location":"data-structure/","text":"Data structure class structured_rep. Item ( dic ) Represents the basic building blocks of the structured representations - objects that have shape, color and spatial location, each belongs to a certain 'box'. Attributes bottom \u2014 Return the bottom coordinate of the item. left \u2014 Return the left coordinate of the item. right \u2014 Return the right coordinate of the item. top \u2014 Return the top coordinate of the item. Methods touching_bottom ( use_margin ) \u2014 Check if the item is touching the bottom. touching_corner ( use_margin ) \u2014 Check if the item is touching a corner. touching_left ( use_margin ) \u2014 Check if the item is touching the left. touching_right ( use_margin ) \u2014 Check if the item is touching the right. touching_top ( use_margin ) \u2014 Check if the item is touching the top. touching_wall ( use_margin ) \u2014 Check if the item is touching a wall. method touching_right ( use_margin=False ) Check if the item is touching the right. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") method touching_left ( use_margin=False ) Check if the item is touching the left. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") method touching_bottom ( use_margin=False ) Check if the item is touching the bottom. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") method touching_top ( use_margin=False ) Check if the item is touching the top. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") method touching_wall ( use_margin=False ) Check if the item is touching a wall. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") method touching_corner ( use_margin=False ) Check if the item is touching a corner. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") class structured_rep. Box ( items_as_dicts ) Represents the 'box' in the image. Methods get_all_items_in_box ( ) \u2014 Returns the items in the box. is_tower ( ) \u2014 Check whether this is an image of towers of blocks (not a regular image with objects of various shapes). method is_tower ( ) Check whether this is an image of towers of blocks (not a regular image with objects of various shapes). method get_all_items_in_box ( ) Returns the items in the box. class structured_rep. Image ( structured_rep ) Represents the structured representation of an image. Methods get_all_boxes ( ) \u2014 Get all boxes within an image. get_all_items ( ) \u2014 Get all items within an image. is_tower ( ) \u2014 Check whether this is an image of towers of blocks or a regular image with objects of various shapes. method get_all_boxes ( ) Get all boxes within an image. Returns A list of boxes method get_all_items ( ) Get all items within an image. Returns A list of items method is_tower ( ) Check whether this is an image of towers of blocks or a regular image with objects of various shapes. Returns A boolean","title":"Data-structures"},{"location":"data-structure/#data-structure","text":"class structured_rep. Item ( dic ) Represents the basic building blocks of the structured representations - objects that have shape, color and spatial location, each belongs to a certain 'box'. Attributes bottom \u2014 Return the bottom coordinate of the item. left \u2014 Return the left coordinate of the item. right \u2014 Return the right coordinate of the item. top \u2014 Return the top coordinate of the item. Methods touching_bottom ( use_margin ) \u2014 Check if the item is touching the bottom. touching_corner ( use_margin ) \u2014 Check if the item is touching a corner. touching_left ( use_margin ) \u2014 Check if the item is touching the left. touching_right ( use_margin ) \u2014 Check if the item is touching the right. touching_top ( use_margin ) \u2014 Check if the item is touching the top. touching_wall ( use_margin ) \u2014 Check if the item is touching a wall. method touching_right ( use_margin=False ) Check if the item is touching the right. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") method touching_left ( use_margin=False ) Check if the item is touching the left. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") method touching_bottom ( use_margin=False ) Check if the item is touching the bottom. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") method touching_top ( use_margin=False ) Check if the item is touching the top. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") method touching_wall ( use_margin=False ) Check if the item is touching a wall. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") method touching_corner ( use_margin=False ) Check if the item is touching a corner. Parameters use_margin (bool) \u2014 allows a certain margin (consider \"almost touching\" as \"touching\") class structured_rep. Box ( items_as_dicts ) Represents the 'box' in the image. Methods get_all_items_in_box ( ) \u2014 Returns the items in the box. is_tower ( ) \u2014 Check whether this is an image of towers of blocks (not a regular image with objects of various shapes). method is_tower ( ) Check whether this is an image of towers of blocks (not a regular image with objects of various shapes). method get_all_items_in_box ( ) Returns the items in the box. class structured_rep. Image ( structured_rep ) Represents the structured representation of an image. Methods get_all_boxes ( ) \u2014 Get all boxes within an image. get_all_items ( ) \u2014 Get all items within an image. is_tower ( ) \u2014 Check whether this is an image of towers of blocks or a regular image with objects of various shapes. method get_all_boxes ( ) Get all boxes within an image. Returns A list of boxes method get_all_items ( ) Get all items within an image. Returns A list of items method is_tower ( ) Check whether this is an image of towers of blocks or a regular image with objects of various shapes. Returns A boolean","title":"Data structure"},{"location":"tutorial/","text":"Tutorial The content of video and text tutorials are the same. Video tutorial Link Text tutorial Step 1 Step 2 Step 3 Step 4 Step 5 Note Please only use the provided functions. If you cannot annotate with the current functions, please do not write your own functions, and reach out via email or by leaving a comment in the comment box below (Step 7). Step 6 Step 7","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"The content of video and text tutorials are the same.","title":"Tutorial"},{"location":"tutorial/#video-tutorial","text":"Link","title":"Video tutorial"},{"location":"tutorial/#text-tutorial","text":"","title":"Text tutorial"},{"location":"tutorial/#step-1","text":"","title":"Step 1"},{"location":"tutorial/#step-2","text":"","title":"Step 2"},{"location":"tutorial/#step-3","text":"","title":"Step 3"},{"location":"tutorial/#step-4","text":"","title":"Step 4"},{"location":"tutorial/#step-5","text":"Note Please only use the provided functions. If you cannot annotate with the current functions, please do not write your own functions, and reach out via email or by leaving a comment in the comment box below (Step 7).","title":"Step 5"},{"location":"tutorial/#step-6","text":"","title":"Step 6"},{"location":"tutorial/#step-7","text":"","title":"Step 7"},{"location":"utility-functions/","text":"Utility functions Note Please opt for shorter code when possible, since it usually aligns better with the language of the sentence. General function logical_forms. exist ( _set ) Check if a set is empty or not. Parameters _set (set) \u2014 a set of objects Returns A boolean (True if it is not empty). function logical_forms. unique ( _set ) Check if there is only one element in the set. Parameters _set (set) \u2014 a set of objects Returns The first element of the set. function logical_forms. count ( _set ) Count the number of elements in a set. Parameters _set (set) \u2014 a set of objects Returns (int) The number of elements in a set. Color function logical_forms. is_yellow ( x ) Check if the color of the item is yellow. Parameters x \u2014 Item Returns (bool) A boolean indicating if the color is yellow. function logical_forms. is_blue ( x ) Check if the color of the item is blue. Parameters x \u2014 Item Returns (bool) A boolean indicating if the color is blue. function logical_forms. is_black ( x ) Check if the color of the item is black. Parameters x \u2014 Item Returns A boolean indicating if the color is black. Shape function logical_forms. is_circle ( x ) Check if the shape of the item is a circle. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_square ( x ) Check if the shape of the item is a square. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_triangle ( x ) Check if the shape of the item is a triangle. Parameters x \u2014 Item Returns A boolean. Size function logical_forms. is_big ( x ) Check if the size of the item is big. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_medium ( x ) Check if the size of the item is medium. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_small ( x ) Check if the size of the item is small Parameters x \u2014 Item Returns A boolean. Relative location in box function logical_forms. is_top ( x ) Check if the item is on the top of the box. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_bottom ( x ) Check if the item is at the bottom of the box. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_second ( x ) Check if the item is the second in a tower. Parameters x \u2014 Item (in a tower) Returns A boolean. function logical_forms. is_third ( x ) Check if the item is the third in a tower. Parameters x \u2014 Item (in a tower) Returns A boolean. Touching the walls of the box function logical_forms. is_touching_wall ( x , side=None ) Check if the item is touching a wall Parameters x \u2014 Item side (optional) \u2014 Optional, can be 'ANY', 'LEFT', 'RIGHT', 'TOP', 'BOTTOM' Returns A boolean function logical_forms. is_closely_touching_wall ( x , side=None ) Check if the item is closely touching a wall Parameters x \u2014 Item side (optional) \u2014 Optional, can be 'ANY', 'LEFT', 'RIGHT', 'TOP', 'BOTTOM' Returns A boolean function logical_forms. is_touching_corner ( x , side=None ) Check if the item is touching a corner Parameters x \u2014 Item side (optional) \u2014 Optional, can be 'ANY', 'LEFT', 'RIGHT', 'TOP', 'BOTTOM' Returns A boolean Query functions These functions return item properties. function logical_forms. query_color ( x ) Check the color properties of the item Parameters x \u2014 Item Returns The color properties function logical_forms. query_size ( x ) Check the size properties of the item Parameters x \u2014 Item Returns The size properties function logical_forms. query_shape ( x ) Check the shape properties of the item Parameters x \u2014 Item Returns The shape properties Filters function logical_forms. filter_obj ( _set , func ) Filter a set according to a function. Parameters _set \u2014 a set of items func \u2014 filter function Returns A list of filtered items function logical_forms. filter_color ( _set , color ) Filter a set according to a color. Parameters _set \u2014 a set of items color (Color) \u2014 can be 'YELLOW', 'BLACK', 'BLUE' Returns A list of filtered items function logical_forms. filter_size ( _set , size ) Filter a set according to a size. Parameters _set \u2014 a set of items size (Size) \u2014 can be 'SMALL', 'MEDIUM', 'BIG' Returns A list of filtered items function logical_forms. filter_shape ( _set , shape ) Filter a set according to a shape. Parameters _set \u2014 a set of items size (Size) \u2014 can be 'CIRCLE', 'SQUARE', 'TRIANGLE' Returns A list of filtered items Comparison functions Integer comparison function logical_forms. le ( a , b ) Compare if element a is less than or equal to element b. Parameters a \u2014 first element b \u2014 second element Returns A boolean function logical_forms. ge ( a , b ) Compare if element a is greater than or equal to element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. lt ( a , b ) Compare if element a is strictly less than element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. gt ( a , b ) Compare if element a is strictly greater than element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. equal_int ( a , b ) Compare if element a is equal to element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean Generic equality check (This check is not limited to Integer type.) function logical_forms. equal ( a , b ) Compare if element a is equal to element b. Parameters a \u2014 first element b \u2014 second element Returns A boolean Type-specific equality functions function logical_forms. equal_color ( a , b ) Check if the colors of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean function logical_forms. equal_size ( a , b ) Check if the sizes of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean function logical_forms. equal_shape ( a , b ) Check if the shape of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean Relation functions Given an Item or a set of items, return a set of items in a specific relation with it/them. function logical_forms. get_above ( s ) Given an item or a set of items, return a set of items above it/them. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_below ( s ) Given an item or a set of items, return a set of items below it/them. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_touching ( s ) Given an item or a set of items, return a set of items touching it/them. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_closely_touching ( s ) Given an item or a set of items, return a set of items closely touching it/them. Parameters s \u2014 an item or a set of items Returns a set of items Logical operators function logical_forms. AND ( a , b ) Check the logical relation AND between a and b. Returns A boolean function logical_forms. OR ( a , b ) Check the logical relation OR between a and b. Returns A boolean function logical_forms. NOT ( a ) Check the logical relation NOT between a and b. Returns A boolean Other functions function logical_forms. All ( _set , func ) Check if a function is True for all items of a set Parameters _set \u2014 a set of items func \u2014 a function Returns A boolean function logical_forms. Any ( _set , func ) Check if a function is True for at least one item of a set Parameters _set \u2014 a set of items func \u2014 a function Returns A boolean function logical_forms. member_of ( item , _set ) Check if an item is a member of a set. Parameters _set \u2014 a set Returns A boolean function logical_forms. contained ( set1 , set2 ) Check if set1 is contained by set2. Returns A boolean function logical_forms. equal_set ( set1 , set2 ) Check if set1 and set2 are equal. Returns A boolean","title":"Utility-functions"},{"location":"utility-functions/#utility-functions","text":"Note Please opt for shorter code when possible, since it usually aligns better with the language of the sentence.","title":"Utility functions"},{"location":"utility-functions/#general","text":"function logical_forms. exist ( _set ) Check if a set is empty or not. Parameters _set (set) \u2014 a set of objects Returns A boolean (True if it is not empty). function logical_forms. unique ( _set ) Check if there is only one element in the set. Parameters _set (set) \u2014 a set of objects Returns The first element of the set. function logical_forms. count ( _set ) Count the number of elements in a set. Parameters _set (set) \u2014 a set of objects Returns (int) The number of elements in a set.","title":"General"},{"location":"utility-functions/#color","text":"function logical_forms. is_yellow ( x ) Check if the color of the item is yellow. Parameters x \u2014 Item Returns (bool) A boolean indicating if the color is yellow. function logical_forms. is_blue ( x ) Check if the color of the item is blue. Parameters x \u2014 Item Returns (bool) A boolean indicating if the color is blue. function logical_forms. is_black ( x ) Check if the color of the item is black. Parameters x \u2014 Item Returns A boolean indicating if the color is black.","title":"Color"},{"location":"utility-functions/#shape","text":"function logical_forms. is_circle ( x ) Check if the shape of the item is a circle. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_square ( x ) Check if the shape of the item is a square. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_triangle ( x ) Check if the shape of the item is a triangle. Parameters x \u2014 Item Returns A boolean.","title":"Shape"},{"location":"utility-functions/#size","text":"function logical_forms. is_big ( x ) Check if the size of the item is big. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_medium ( x ) Check if the size of the item is medium. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_small ( x ) Check if the size of the item is small Parameters x \u2014 Item Returns A boolean.","title":"Size"},{"location":"utility-functions/#relative-location-in-box","text":"function logical_forms. is_top ( x ) Check if the item is on the top of the box. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_bottom ( x ) Check if the item is at the bottom of the box. Parameters x \u2014 Item Returns A boolean. function logical_forms. is_second ( x ) Check if the item is the second in a tower. Parameters x \u2014 Item (in a tower) Returns A boolean. function logical_forms. is_third ( x ) Check if the item is the third in a tower. Parameters x \u2014 Item (in a tower) Returns A boolean.","title":"Relative location in box"},{"location":"utility-functions/#touching-the-walls-of-the-box","text":"function logical_forms. is_touching_wall ( x , side=None ) Check if the item is touching a wall Parameters x \u2014 Item side (optional) \u2014 Optional, can be 'ANY', 'LEFT', 'RIGHT', 'TOP', 'BOTTOM' Returns A boolean function logical_forms. is_closely_touching_wall ( x , side=None ) Check if the item is closely touching a wall Parameters x \u2014 Item side (optional) \u2014 Optional, can be 'ANY', 'LEFT', 'RIGHT', 'TOP', 'BOTTOM' Returns A boolean function logical_forms. is_touching_corner ( x , side=None ) Check if the item is touching a corner Parameters x \u2014 Item side (optional) \u2014 Optional, can be 'ANY', 'LEFT', 'RIGHT', 'TOP', 'BOTTOM' Returns A boolean","title":"Touching the walls of the box"},{"location":"utility-functions/#query-functions","text":"These functions return item properties. function logical_forms. query_color ( x ) Check the color properties of the item Parameters x \u2014 Item Returns The color properties function logical_forms. query_size ( x ) Check the size properties of the item Parameters x \u2014 Item Returns The size properties function logical_forms. query_shape ( x ) Check the shape properties of the item Parameters x \u2014 Item Returns The shape properties","title":"Query functions"},{"location":"utility-functions/#filters","text":"function logical_forms. filter_obj ( _set , func ) Filter a set according to a function. Parameters _set \u2014 a set of items func \u2014 filter function Returns A list of filtered items function logical_forms. filter_color ( _set , color ) Filter a set according to a color. Parameters _set \u2014 a set of items color (Color) \u2014 can be 'YELLOW', 'BLACK', 'BLUE' Returns A list of filtered items function logical_forms. filter_size ( _set , size ) Filter a set according to a size. Parameters _set \u2014 a set of items size (Size) \u2014 can be 'SMALL', 'MEDIUM', 'BIG' Returns A list of filtered items function logical_forms. filter_shape ( _set , shape ) Filter a set according to a shape. Parameters _set \u2014 a set of items size (Size) \u2014 can be 'CIRCLE', 'SQUARE', 'TRIANGLE' Returns A list of filtered items","title":"Filters"},{"location":"utility-functions/#comparison-functions","text":"","title":"Comparison functions"},{"location":"utility-functions/#integer-comparison","text":"function logical_forms. le ( a , b ) Compare if element a is less than or equal to element b. Parameters a \u2014 first element b \u2014 second element Returns A boolean function logical_forms. ge ( a , b ) Compare if element a is greater than or equal to element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. lt ( a , b ) Compare if element a is strictly less than element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. gt ( a , b ) Compare if element a is strictly greater than element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean function logical_forms. equal_int ( a , b ) Compare if element a is equal to element b. Parameters a (int) \u2014 first element b (int) \u2014 second element Returns A boolean","title":"Integer comparison"},{"location":"utility-functions/#generic-equality-check","text":"(This check is not limited to Integer type.) function logical_forms. equal ( a , b ) Compare if element a is equal to element b. Parameters a \u2014 first element b \u2014 second element Returns A boolean","title":"Generic equality check"},{"location":"utility-functions/#type-specific-equality-functions","text":"function logical_forms. equal_color ( a , b ) Check if the colors of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean function logical_forms. equal_size ( a , b ) Check if the sizes of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean function logical_forms. equal_shape ( a , b ) Check if the shape of element a and of element b are the same. Parameters a \u2014 first element b \u2014 second element Returns A boolean","title":"Type-specific equality functions"},{"location":"utility-functions/#relation-functions","text":"Given an Item or a set of items, return a set of items in a specific relation with it/them. function logical_forms. get_above ( s ) Given an item or a set of items, return a set of items above it/them. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_below ( s ) Given an item or a set of items, return a set of items below it/them. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_touching ( s ) Given an item or a set of items, return a set of items touching it/them. Parameters s \u2014 an item or a set of items Returns a set of items function logical_forms. get_closely_touching ( s ) Given an item or a set of items, return a set of items closely touching it/them. Parameters s \u2014 an item or a set of items Returns a set of items","title":"Relation functions"},{"location":"utility-functions/#logical-operators","text":"function logical_forms. AND ( a , b ) Check the logical relation AND between a and b. Returns A boolean function logical_forms. OR ( a , b ) Check the logical relation OR between a and b. Returns A boolean function logical_forms. NOT ( a ) Check the logical relation NOT between a and b. Returns A boolean","title":"Logical operators"},{"location":"utility-functions/#other-functions","text":"function logical_forms. All ( _set , func ) Check if a function is True for all items of a set Parameters _set \u2014 a set of items func \u2014 a function Returns A boolean function logical_forms. Any ( _set , func ) Check if a function is True for at least one item of a set Parameters _set \u2014 a set of items func \u2014 a function Returns A boolean function logical_forms. member_of ( item , _set ) Check if an item is a member of a set. Parameters _set \u2014 a set Returns A boolean function logical_forms. contained ( set1 , set2 ) Check if set1 is contained by set2. Returns A boolean function logical_forms. equal_set ( set1 , set2 ) Check if set1 and set2 are equal. Returns A boolean","title":"Other functions"},{"location":"variables/","text":"Variables Provided variables There are some variables that are already provided: all_items This variable contains all the objects that have a shape, a color and a spatial location in the image. all_boxes This variable contains all the boxes in the image (with a number of 3 per image). image This variable refers to the structured representation of the image.","title":"Variables"},{"location":"variables/#variables","text":"","title":"Variables"},{"location":"variables/#provided-variables","text":"There are some variables that are already provided: all_items This variable contains all the objects that have a shape, a color and a spatial location in the image. all_boxes This variable contains all the boxes in the image (with a number of 3 per image). image This variable refers to the structured representation of the image.","title":"Provided variables"}]}